%%%%%%
% Model of a Logical Hidden Markov Model (LOHMM)
% LM = (SIGMA, MU, DELTA, UPSILON)
% Where
%     SIGMA := logical alphabet
%     MU := selection (grounding) probability over SIGMA
%     DELTA := set of abstract transitions T = (p : H <- B emitting O)
%     UPSILON := set of abstract transitions encoding a prior distribution of states
% ---
% USAGE:
%     ?- sample(lohmm(Observations)).
%     Returns a list of observations emitted from the LOHMM
%
%     ?- sample(lohmm(States, Observations)).
%     Returns a list of observations emitted and states traversed via the LOHMM
%
%     ?- prob(lohmm([emacs(f2)])).
%     Returns the probability of the observation sequence.
% ---
% Example taken from "Logical Hidden Markov Models" - Kersting, De Raedt, Raiko; Figure 1.
%%%%%%
%%------------------------------------
%% Declarations section
%%------------------------------------

%%
% [UPSILON] Prior distribution on starting states
%%
values(start_r, [upsilon(start, 1), upsilon(start, 2)]).

%%
% [DELTA] Abstract transitions
% ---
% Each ground state is first matched to the most specific abstract state,
%     then the transition is chosen based on transition probability,
%     returns the rule/3 which deterministically unifies with the selected transition (EX: delta(ls, 1)).
%
% values/2 for more general B should be placed below values/2 for more specific B, 
% implementing the subsumption constraint.
%%

% ls(U)
values(ls_r, [delta(ls, 1), delta(ls, 2), delta(ls, 3)]). 

% emacs(F, tex)
values(emacs_2_r, [delta(emacs_2, 1), delta(emacs_2, 2), delta(emacs_2, 3), delta(emacs_2, 4)]).

% emacs(F, U)
values(emacs_1_r, [delta(emacs_1, 1), delta(emacs_1, 2), delta(emacs_1, 3)]).

% latex(F, tex)
values(latex_r, [delta(latex, 1), delta(latex, 2), delta(latex, 3), delta(latex, 4)]).

%%
% [MU] Grounding rules
% ---
% Each variable in the term has an associated probability over a typed domain.
% It is assumed that the arguments are distributed independently via naive Bayes assumption (wrt the term name).
% Variables which appear multiple times in a term will be bound once in allbind/4 
% and the value will be shared via unification.
%%

% emacs/2
values(mu(emacs/2, 1), [f1, f2]).
values(mu(emacs/2, 2), [tex, other]).

% latex/2
values(mu(latex/2, 1), [f1, f2]).
values(mu(latex/2, 2), [tex, other]).

% ls/1
values(mu(ls/1, 1), [tex, other]).

%%
% subsumption/2 definitions
%%
subsumption(start, start_r).
subsumption(ls(U), ls_r).
subsumption(emacs(F, tex), emacs_2_r).
subsumption(emacs(F, U), emacs_1_r).
subsumption(latex(F, tex), latex_r).

%%
% rule/3 definitions
%%

% upsilon rule
rule(upsilon(start, 1), start, (null, ls(U))).
rule(upsilon(start, 2), start, (null, emacs(F, U))).

% ls(U) rule
rule(delta(ls, 1), ls(U), (ls, ls(U))).
rule(delta(ls, 2), ls(U), (ls, emacs(F, U1))).
rule(delta(ls, 3), ls(U), (ls, stop)).

% emacs(F, tex) rule
rule(delta(emacs_2, 1), emacs(F, tex), (emacs(F), ls(U1))).
rule(delta(emacs_2, 2), emacs(F, tex), (emacs(F), emacs(F1, tex))).
rule(delta(emacs_2, 3), emacs(F, tex), (emacs(F), latex(F, tex))).
rule(delta(emacs_2, 4), emacs(F, tex), (emacs(F), stop)).

% emacs(F, U) rule
rule(delta(emacs_1, 1), emacs(F,U), (emacs(F), emacs(F1, U))).
rule(delta(emacs_1, 2), emacs(F,U), (emacs(F), ls(U1))).
rule(delta(emacs_1, 3), emacs(F,U), (emacs(F), stop)).

% latex(F, tex) rule
rule(delta(latex, 1), latex(F, tex), (latex(F), ls(U1))).
rule(delta(latex, 2), latex(F, tex), (latex(F), emacs(F1, U))).
rule(delta(latex, 3), latex(F, tex), (latex(F), emacs(F, tex))).
rule(delta(latex, 4), latex(F, tex), (latex(F), stop)).

%%------------------------------------
%% Utility section
%%------------------------------------

set_params :-
    set_sw(start_r, [0.55, 0.45]),
    set_sw(emacs_2_r, [0.2666, 0.0666, 0.5666, 0.1]),
    set_sw(emacs_1_r, [0.25, 0.65, 0.1]),
    set_sw(latex_r, [0.1666, 0.5666, 0.1666, 0.1]),
    set_sw(ls_r, [0.35, 0.55, 0.1]).


%%------------------------------------
%% Modeling section
%%------------------------------------

%%
% [lohmm/1] lohmm(Observations)
% ---
% Observations := a list of observations emitted from the LOHMM
% ---
% Returns the list of observations.
%%
:- export(lohmm(Obs)).
lohmm(Obs) :- lohmm(_, Obs).

%%
% [lohmm/2] lohmm(States, Observations)
% ---
% States := a list of states traversed
% Observations := a list of observations emitted from the LOHMM
% ---
% Returns the list of states and observations.
%%
:- export(lohmm(States, Obs)).
lohmm(States, Obs) :-
    set_params,                                 
    lohmm(start, [start | States], [_ | Obs], 1). 

%%
% [lohmm/3] lohmm(Current, States, Observations, Itr)
% ---
% Current := the current ground state
% States := a list of states traversed
% Observations := a list of observations emitted from the LOHMM
% Itr := the current iteration
% ---
% Selects trans/3 based on the current state,
%     Obs and Next are ground,
%     loop until the current state is stop.
%%
lohmm(State, [State|States], [Obs|Obss], Itr) :-
    trans(State, Obs, Next, Itr),
    Next = stop,
    Obss = [], 
    States = [].

lohmm(State, [State|States], [Obs|Obss], Itr) :- 
    trans(State, Obs, Next, Itr),
    Next \= stop,
    bind(Next, ID1, Itr),
    bind(Obs, ID2, Itr),
    _Itr is Itr + 1,
    lohmm(Next, States, Obss, _Itr).

%%
% [trans/3] trans(Current, Obs, Next, Itr)
% ---
% Current := the current ground state
% Obs := the partially ground observation
% Next := the partially ground next state
% Itr := current iteration
% ---
% First selects a RuleID (to implement subsumption constraint),
%     then uses the DELTA transitions of Rule_ID to select the next Rule,
%     unifies rule/3 based on the current state and the selected Rule.
%
% NOTE: Rule itself is also an identifier used so that all instances which may
% unify with some msw will share the same transition probability space for learning.
%%
trans(State, Obs, Next, Itr) :-
    subsumption(State, RuleID), !,
    msw(RuleID, Itr, Rule), 
    rule(Rule, State, (Obs, Next)).

%%
% [bind/2] bind(Term, Itr)
% ---
% Term := patially ground term
% Itr := current iteration
% ---
% Accesses Term arity and arguments and calls allbind/3 to ground the term.
%%
bind(Term, Itr) :- 
    functor(Term, F, N),         
    Term =.. [F|Args],             
    allbind(F/N, 1, Args, Itr). 

%%
% [allbind/4] allbind(Term, I, Args, Itr)
% ---
% Term := term represented by <term_name>/<arity>, used to index msw
% I := current iteration which corresponds to the current arg position
% Args := list of arguments in term
% Itr := current iteration
% ---
% Loop over Arg in Args:
%     if Arg is not ground:
%         ground Arg via MU
%
% The msw for MU is indexed via mu(<term_name>/<arity>, <arg_position>)
%%
allbind(_, _, [], _).

allbind(T, I, [Arg|Args], Itr) :-
    var(Arg),
    msw(mu(T, I), Itr, Arg),
    I1 is I + 1,
    allbind(T, I1, Args, Itr).

allbind(T, I, [Arg|Args], Itr) :-
    nonvar(Arg),
    I1 is I + 1,
    allbind(T, I1, Args, Itr).