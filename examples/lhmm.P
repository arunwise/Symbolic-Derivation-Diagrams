values(rule_select(start), [r1, r2]).
values(rule_select(ls_u), [r1, r2]).
values(rule_select(emacs_f_u), [r1, r2]).
values(rule_select(emacs_f_tex), [r3, r4, r5]).
values(rule_select(latex_f_tex), [r3, r4, r5]).
values(select_user, [tex, other]).
values(select_file, [f1, f2]).

set_sw(rule_select(start), [0.55, 0.45]).
set_sw(rule_select(ls_u), [0.4, 0.6]).
set_sw(rule_select(emacs_f_u), [0.7, 0.3]).
set_sw(rule_select(emacs_f_tex), [0.6, 0.3, 0.1]).
set_sw(rule_select(latex_f_tex), [0.2, 0.2, 0.6]).
set_sw(select_user, [0.5, 0.5]).
set_sw(select_file, [0.5, 0.5]).

%% Abstract transition rules
%% rule(bpart, rule, current state, next state, output)
rule(start, R, start, ls(U), null) :- {R = r1}.
rule(start, R, start, emacs(F, U), null) :- {R = r2}.

% use a different symbol for 'ls' output than 'ls' atom functor
rule(ls_u, R, ls(U), ls(U), lso) :- {R = r1}.
rule(ls_u, R, ls(U1), emacs(F, U), lso) :- {R = r2}.

rule(emacs_f_u, R, emacs(F, U), ls(U1), emacs(F)) :- {U \= tex}, {R = r1}.
rule(emacs_f_u, R, emacs(F, U), emacs(F1, U), emacs(F)) :- {U \= tex}, {R = r2}.

rule(emacs_f_tex, R, emacs(F, U1), latex(F, U1), emacs(F)) :- {U1 = tex}, {R = r3}.
rule(emacs_f_tex, R, emacs(F, U1), ls(U), emacs(F)) :- {U1 = tex}, {R = r4}.
rule(emacs_f_tex, R, emacs(F, U1), emacs(F1, U), emacs(F)) :- {U1 = tex}, {R = r5}.

rule(latex_f_tex, R, latex(F, U1), ls(U), latex(F)) :- {U1 = tex}, {R = r3}.
rule(latex_f_tex, R, latex(F, U1), emacs(F, U1), latex(F)) :- {U1 = tex}, {R = r4}.
rule(latex_f_tex, R, latex(F, U1), emacs(F1, U), latex(F)) :- {U1 = tex}, {R = r5}.


lhmm(T, T, State, [], []).
lhmm(Tstart, Tend, State, [S| SR], [O| OR]) :-
    Tstart < Tend,
    % find the b-part matching the current state
    bpart(B, State),
    msw(rule_select(B), Tstart, R),
    rule(B, R, State, S, O),
    select(Tstart, State, S, O),
    T is Tstart + 1,
    lhmm(T, Tend, S, SR, OR).

q :-
    trans(0, 1, start, ls(U), null),
    {U=tex}.

q1 :-
    trans(1, 2, ls(U), ls(U), ls),
    {U=tex}.

q21 :-
    trans(0, 1, _, ls(U), null).

q22 :-
    trans(0, 1, _, emacs(F,U), null).

q2 :- q21.
q2 :- q22.

% first transition
trans(0, 1, start, S, null) :-
    msw(rule_select(start), 0, R),
    % get current abstract state, next abstract state and output
    rule(start, R, start, S, null),
    % ground the next abstract state
    select(0, start, S, null).

% rest of the transitions
trans(T1, T, S1, S, O) :-
    T1 > 0,
    T is T1 + 1,
    T2 is T1 - 1,
    trans(T2, T1, _S2, S1, _O2),
    bpart(B, S1),
    msw(rule_select(B), T1, R),
    rule(B, R, S1, S, O),
    select(T1, S1, S, O).

lhmm1(_T, _T, [], []).
lhmm1(T1, E, [S| SR], [O| OR]) :-
    T1 < E,
    T is T1 + 1,
    %% trans(T1, T, _S1, State, Obs),
    %% {State = S}, {Obs = O},    
    trans(T1, T, _S1, S, O),    
    lhmm1(T, E, SR, OR).

lhmm(0, [], []).
lhmm(T, S, O) :-
    T > 0,
    lhmm1(0, T, S, O).

stateseq(T, S) :-
    lhmm(T, S, _).

observations(T, O) :-
    lhmm(T, _, O).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
bpart(start, start).
bpart(ls_u, ls(U)).
bpart(emacs_f_tex, emacs(F, U)) :- {U = tex}.
bpart(emacs_f_u, emacs(F, U)) :- {U \= tex}.
bpart(latex_f_tex, latex(F, U)) :- {U = tex}.

% ground abstract states
select(T, start, ls(U), null) :-
    msw(select_user, T, U).

select(T, start, emacs(F, U), null) :-
    msw(select_file, T, F),
    msw(select_user, T, U).

%% use a different symbol for 'ls' output symbol than the functor for 'ls' atom
select(T, ls(U), ls(U), lso).
select(T, ls(U1), emacs(F, U), lso) :-
    msw(select_file, T, F),
    msw(select_user, T, U).

select(T, emacs(F, U), ls(U), emacs(F)) :-
    {U \= tex},
    msw(select_user, T, U).
select(T, emacs(F, U), emacs(F, U), emacs(F)) :-
    {U \= tex},
    msw(select_file, T, F).

select(T, emacs(F, U), latex(F, U), emacs(F)) :-
    {U = tex}.
select(T, emacs(F, U1), ls(U), emacs(F)) :-
    {U1 = tex},
    msw(select_user, T, U).
select(T, emacs(F, U1), emacs(F, U), emacs(F)) :-
    {U1 = tex},
    msw(select_file, T, F),
    msw(select_user, T, U).

select(T, latex(F, U1), ls(U), latex(F)) :-
    {U1 = tex},
    msw(select_user, T, U).
select(T, latex(F, U), emacs(F, U), latex(F)) :- {U = tex}.
select(T, latex(F, U1), emacs(F, U), latex(F)) :-
    {U1 = tex},
    msw(select_file, T, F),
    msw(select_user, T, U).
